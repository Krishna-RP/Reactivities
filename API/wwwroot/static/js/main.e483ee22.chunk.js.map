{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivitiyListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/details/ActivityDetailedChat.tsx","features/details/ActivityDetailedHeader.tsx","features/details/ActivityDetailedInfo.tsx","features/details/ActivityDetailedSidebar.tsx","features/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","put","delete","post","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","attendees","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendace","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityFilters","vertical","size","width","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","marginTop","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","RegisterForm","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","SegmentInline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e483ee22.chunk.js","sourcesContent":["export interface Pagination {\r\n   currentPage: number;\r\n   itemsPerPage: number;\r\n   totalItems: number;\r\n   totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n   data: T;\r\n   pagination: Pagination;\r\n\r\n   constructor(data: T, pagination: Pagination) {\r\n      this.data = data;\r\n      this.pagination = pagination;\r\n   }\r\n}\r\n\r\nexport class PagingParams {\r\n   pageNumber;\r\n   pageSize;\r\n\r\n   constructor(pageNumber = 1, pageSize = 2) {\r\n      this.pageSize = pageSize;\r\n      this.pageNumber = pageNumber;\r\n   }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n   return new Promise((resolve) => {\r\n      setTimeout(resolve, delay);\r\n   });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n   const token = store.commonStore.token;\r\n   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n   return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n   async (response) => {\r\n      if (process.env.NODE_ENV === \"development\") await sleep(1000);\r\n      const pagination = response.headers[\"pagination\"];\r\n      if (pagination) {\r\n         response.data = new PaginatedResult(\r\n            response.data,\r\n            JSON.parse(pagination)\r\n         );\r\n         return response as AxiosResponse<PaginatedResult<any>>;\r\n      }\r\n      return response;\r\n   },\r\n   (error: AxiosError) => {\r\n      const { data, status, config } = error.response!;\r\n      switch (status) {\r\n         case 400:\r\n            if (typeof data === \"string\") {\r\n               toast.error(data);\r\n            }\r\n            if (config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\r\n               history.push(\"/not-found\");\r\n            }\r\n            if (data.errors) {\r\n               const modalStateErrors = [];\r\n               for (const key in data.errors) {\r\n                  if (data.errors[key]) {\r\n                     modalStateErrors.push(data.errors[key]);\r\n                  }\r\n               }\r\n               throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n         case 401:\r\n            toast.error(\"Unauthorised\");\r\n            break;\r\n         case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n         case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push(\"/server-error\");\r\n            break;\r\n      }\r\n      return Promise.reject(error);\r\n   }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n   get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n   put: <T>(url: string, body: {}) =>\r\n      axios.put<T>(url, body).then(responseBody),\r\n   del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n   post: <T>(url: string, body: {}) =>\r\n      axios.post<T>(url, body).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n   list: (params: URLSearchParams) =>\r\n      axios\r\n         .get<PaginatedResult<Activity[]>>(\"/activities\", { params })\r\n         .then(responseBody),\r\n   details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n   create: (activity: ActivityFormValues) =>\r\n      requests.post<void>(\"/activities\", activity),\r\n   update: (activity: ActivityFormValues) =>\r\n      requests.put<void>(`/activities/${activity.id}`, activity),\r\n   delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n   attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n   current: () => requests.get<User>(\"/account\"),\r\n   login: (user: UserFormValues) => requests.post<User>(\"/account/login\", user),\r\n   register: (user: UserFormValues) =>\r\n      requests.post<User>(\"/account/register\", user),\r\n};\r\n\r\nconst Profiles = {\r\n   get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n   uploadPhoto: (file: Blob) => {\r\n      let formData = new FormData();\r\n      formData.append(\"File\", file);\r\n      return axios.post<Photo>(\"photos\", formData, {\r\n         headers: {\r\n            \"Content-type\": \"multipart/form-data\",\r\n         },\r\n      });\r\n   },\r\n\r\n   setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n   deletePhoto: (id: string) => requests.del(`/photos/${id}/`),\r\n   updateProfile: (profile: Partial<Profile>) =>\r\n      requests.put(`/profiles`, profile),\r\n   updateFollowing: (username: string) =>\r\n      requests.post(`/follow/${username}`, {}),\r\n   listFollowings: (username: string, predicate: string) =>\r\n      requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n   listActivities: (username: string, predicate: string) =>\r\n      requests.get<UserActivity[]>(\r\n         `/profiles/${username}/activities?predicate=${predicate}`\r\n      ),\r\n};\r\n\r\nconst agent = {\r\n   Activities,\r\n   Account,\r\n   Profiles,\r\n};\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n   id: string;\r\n   title: string;\r\n   date: Date | null;\r\n   description: string;\r\n   category: string;\r\n   city: string;\r\n   venue: string;\r\n   hostUsername: string;\r\n   isCancelled: boolean;\r\n   attendees: Profile[];\r\n   isGoing: boolean;\r\n   isHost: boolean;\r\n   host?: Profile;\r\n}\r\n\r\nexport class Activity implements Activity {\r\n   constructor(init?: ActivityFormValues) {\r\n      Object.assign(this.attendees, init);\r\n   }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n   id?: string = undefined;\r\n   title: string = \"\";\r\n   category: string = \"\";\r\n   description: string = \"\";\r\n   date: Date | null = null;\r\n   city: string = \"\";\r\n   venue: string = \"\";\r\n\r\n   constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n         this.id = activity.id;\r\n         this.title = activity.title;\r\n         this.category = activity.category;\r\n         this.description = activity.description;\r\n         this.city = activity.city;\r\n         this.date = activity.date;\r\n         this.venue = activity.venue;\r\n      }\r\n   }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n   username: string;\r\n   displayName: string;\r\n   image?: string;\r\n   bio?: string;\r\n   followersCount: number;\r\n   followingCount: number;\r\n   following: boolean;\r\n   photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n   constructor(user: User) {\r\n      this.username = user.username;\r\n      this.displayName = user.displayName;\r\n      this.image = user.image;\r\n   }\r\n}\r\n\r\nexport interface Photo {\r\n   id: string;\r\n   url: string;\r\n   isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n   id: string;\r\n   title: string;\r\n   category: string;\r\n   date: Date;\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n   activityRegistry = new Map<string, Activity>();\r\n   selectedActivity: Activity | undefined = undefined;\r\n   editMode = false;\r\n   loading = false;\r\n   loadingInitial = false;\r\n   pagination: Pagination | null = null;\r\n   pagingParams = new PagingParams();\r\n   predicate = new Map().set(\"all\", true);\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n      reaction(\r\n         () => this.predicate.keys(),\r\n         () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n         }\r\n      );\r\n   }\r\n\r\n   setPagingParams = (pagingParams: PagingParams) => {\r\n      this.pagingParams = pagingParams;\r\n   };\r\n\r\n   setPredicate = (predicate: string, value: string | Date) => {\r\n      const resetPredicate = () => {\r\n         this.predicate.forEach((value, key) => {\r\n            if (key !== \"startDate\") this.predicate.delete(key);\r\n         });\r\n      };\r\n      switch (predicate) {\r\n         case \"all\":\r\n            resetPredicate();\r\n            this.predicate.set(\"all\", true);\r\n            break;\r\n         case \"isGoing\":\r\n            resetPredicate();\r\n            this.predicate.set(\"isGoing\", true);\r\n            break;\r\n         case \"isHost\":\r\n            resetPredicate();\r\n            this.predicate.set(\"isHost\", true);\r\n            break;\r\n         case \"startDate\":\r\n            this.predicate.delete(\"startDate\");\r\n            this.predicate.set(\"startDate\", value);\r\n            break;\r\n      }\r\n   };\r\n   get axiosParams() {\r\n      const params = new URLSearchParams();\r\n      params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n      params.append(\"pageSize\", this.pagingParams.pageSize.toString());\r\n      this.predicate.forEach((value, key) => {\r\n         if (key === \"startDate\") {\r\n            params.append(key, (value as Date).toISOString());\r\n         } else {\r\n            params.append(key, value);\r\n         }\r\n      });\r\n      return params;\r\n   }\r\n\r\n   get activitiesByDate() {\r\n      return Array.from(this.activityRegistry.values()).sort(\r\n         (a, b) => a.date!.getTime() - b.date!.getTime()\r\n      );\r\n   }\r\n\r\n   get groupedActivities() {\r\n      return Object.entries(\r\n         this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, \"dd MMM yyyy\");\r\n            activities[date] = activities[date]\r\n               ? [...activities[date], activity]\r\n               : [activity];\r\n            return activities;\r\n         }, {} as { [key: string]: Activity[] })\r\n      );\r\n   }\r\n\r\n   loadActivities = async () => {\r\n      this.loadingInitial = true;\r\n      try {\r\n         const result = await agent.Activities.list(this.axiosParams);\r\n         result.data.forEach((activity) => {\r\n            this.setActivity(activity);\r\n         });\r\n         this.setPagination(result.pagination);\r\n         this.setLoadingInitial(false);\r\n      } catch (error) {\r\n         console.log(error);\r\n         this.setLoadingInitial(false);\r\n      }\r\n   };\r\n\r\n   setPagination = (pagination: Pagination) => {\r\n      this.pagination = pagination;\r\n   };\r\n\r\n   loadActivity = async (id: string) => {\r\n      let activity = this.getActivity(id);\r\n      if (activity) {\r\n         this.selectedActivity = activity;\r\n         return activity;\r\n      } else {\r\n         this.loadingInitial = true;\r\n         try {\r\n            activity = await agent.Activities.details(id);\r\n            this.setActivity(activity);\r\n            runInAction(() => {\r\n               this.selectedActivity = activity;\r\n            });\r\n            this.setLoadingInitial(false);\r\n            return activity;\r\n         } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n         }\r\n      }\r\n   };\r\n\r\n   private getActivity = (id: string) => {\r\n      return this.activityRegistry.get(id);\r\n   };\r\n\r\n   private setActivity = (activity: Activity) => {\r\n      const user = store.userStore.user;\r\n      if (user) {\r\n         activity.isGoing = activity.attendees!.some(\r\n            (a) => a.username === user.username\r\n         );\r\n         activity.isHost = activity.hostUsername === user.username;\r\n         activity.host = activity.attendees?.find(\r\n            (x) => x.username === activity.hostUsername\r\n         );\r\n      }\r\n      activity.date = new Date(activity.date!);\r\n      this.activityRegistry.set(activity.id, activity);\r\n   };\r\n\r\n   setLoadingInitial = (state: boolean) => {\r\n      this.loadingInitial = state;\r\n   };\r\n\r\n   createActivity = async (activity: ActivityFormValues) => {\r\n      const user = store.userStore.user;\r\n      const attendee = new Profile(user!);\r\n      try {\r\n         await agent.Activities.create(activity);\r\n         const newActivity = new Activity(activity);\r\n         newActivity.hostUsername = user!.username;\r\n         newActivity.attendees = [attendee];\r\n         this.setActivity(newActivity);\r\n         runInAction(() => {\r\n            this.selectedActivity = newActivity;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => {\r\n            this.loading = false;\r\n         });\r\n      }\r\n   };\r\n\r\n   updateActivity = async (activity: ActivityFormValues) => {\r\n      try {\r\n         await agent.Activities.update(activity);\r\n         runInAction(() => {\r\n            if (activity.id) {\r\n               let updatedActivity = {\r\n                  ...this.getActivity(activity.id),\r\n                  ...activity,\r\n               };\r\n               this.activityRegistry.set(\r\n                  activity.id,\r\n                  updatedActivity as Activity\r\n               );\r\n\r\n               this.selectedActivity = updatedActivity as Activity;\r\n            }\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   deleteActivity = async (id: string) => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Activities.delete(id);\r\n         runInAction(() => {\r\n            this.activityRegistry.delete(id);\r\n            this.loading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => {\r\n            this.loading = false;\r\n         });\r\n      }\r\n   };\r\n   updateAttendace = async () => {\r\n      const user = store.userStore.user;\r\n      this.loading = true;\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            if (this.selectedActivity?.isGoing) {\r\n               this.selectedActivity.attendees =\r\n                  this.selectedActivity.attendees?.filter(\r\n                     (a) => a.username !== user?.username\r\n                  );\r\n               this.selectedActivity.isGoing = false;\r\n            } else {\r\n               const attendee = new Profile(user!);\r\n               this.selectedActivity?.attendees?.push(attendee);\r\n               this.selectedActivity!.isGoing = true;\r\n            }\r\n            this.activityRegistry.set(\r\n               this.selectedActivity!.id,\r\n               this.selectedActivity!\r\n            );\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => (this.loading = false));\r\n      }\r\n   };\r\n\r\n   cancelActivityToggle = async () => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            this.selectedActivity!.isCancelled =\r\n               !this.selectedActivity?.isCancelled;\r\n            this.activityRegistry.set(\r\n               this.selectedActivity!.id,\r\n               this.selectedActivity!\r\n            );\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => (this.loading = false));\r\n      }\r\n   };\r\n\r\n   clearSelectedActivity = () => {\r\n      this.selectedActivity = undefined;\r\n   };\r\n\r\n   updateAttendeeFollowing = (username: string) => {\r\n      this.activityRegistry.forEach((activity) => {\r\n         activity.attendees.forEach((attendee) => {\r\n            if (attendee.username === username) {\r\n               attendee.following\r\n                  ? attendee.followersCount--\r\n                  : attendee.followersCount++;\r\n               attendee.following = !attendee.following;\r\n            }\r\n         });\r\n      });\r\n   };\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n   profile: Profile | null = null;\r\n   loadingProfile = false;\r\n   uploading = false;\r\n   loading = false;\r\n   followings: Profile[] = [];\r\n   loadingFollowings = false;\r\n   activeTab = 0;\r\n   userActivities: UserActivity[] = [];\r\n   loadingActivities = false;\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n\r\n      reaction(\r\n         () => this.activeTab,\r\n         (activeTab) => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n               const predicate = activeTab === 3 ? \"followers\" : \"following\";\r\n               this.loadFollowings(predicate);\r\n            } else {\r\n               this.followings = [];\r\n            }\r\n         }\r\n      );\r\n   }\r\n\r\n   setActiveTab = (activeTab: any) => {\r\n      this.activeTab = activeTab;\r\n   };\r\n\r\n   get isCurrentUser() {\r\n      if (store.userStore.user && this.profile) {\r\n         return store.userStore.user.username === this.profile.username;\r\n      }\r\n      return false;\r\n   }\r\n\r\n   loadProfile = async (username: string) => {\r\n      this.loadingProfile = true;\r\n      try {\r\n         const profile = await agent.Profiles.get(username);\r\n         runInAction(() => {\r\n            this.profile = profile;\r\n            this.loadingProfile = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => (this.loadingProfile = false));\r\n      }\r\n   };\r\n\r\n   uploadPhoto = async (file: Blob) => {\r\n      this.uploading = true;\r\n      try {\r\n         const response = await agent.Profiles.uploadPhoto(file);\r\n         const photo = response.data;\r\n         runInAction(() => {\r\n            if (this.profile) {\r\n               this.profile.photos?.push(photo);\r\n               if (photo.isMain && store.userStore.user) {\r\n                  store.userStore.setImage(photo.url);\r\n                  this.profile.image = photo.url;\r\n               }\r\n            }\r\n            this.uploading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => (this.uploading = false));\r\n      }\r\n   };\r\n\r\n   setMainPhoto = async (photo: Photo) => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Profiles.setMainPhoto(photo.id);\r\n         store.userStore.setImage(photo.url);\r\n         runInAction(() => {\r\n            if (this.profile && this.profile.photos) {\r\n               this.profile.photos.find((p) => p.isMain)!.isMain = false;\r\n               this.profile.photos.find((p) => p.id === photo.id)!.isMain =\r\n                  true;\r\n               this.profile.image = photo.url;\r\n               this.loading = false;\r\n            }\r\n         });\r\n      } catch (error) {\r\n         runInAction(() => (this.loading = false));\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   deletePhoto = async (photo: Photo) => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Profiles.deletePhoto(photo.id);\r\n         runInAction(() => {\r\n            if (this.profile && this.profile.photos) {\r\n               this.profile.photos = this.profile.photos?.filter(\r\n                  (p) => p.id !== photo.id\r\n               );\r\n               this.loading = false;\r\n            }\r\n         });\r\n      } catch (error) {\r\n         runInAction(() => (this.loading = false));\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   updateProfile = async (profile: Partial<Profile>) => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Profiles.updateProfile(profile);\r\n         runInAction(() => {\r\n            if (\r\n               profile.displayName &&\r\n               profile.displayName !== store.userStore.user?.displayName\r\n            ) {\r\n               store.userStore.setDisplayName(profile.displayName);\r\n            }\r\n            this.profile = { ...this.profile, ...(profile as Profile) };\r\n            this.loading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => (this.loading = false));\r\n      }\r\n   };\r\n\r\n   updateFollowing = async (username: string, following: boolean) => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Profiles.updateFollowing(username);\r\n         store.activityStore.updateAttendeeFollowing(username);\r\n         runInAction(() => {\r\n            if (\r\n               this.profile &&\r\n               this.profile.username !== store.userStore.user?.username &&\r\n               this.profile.username === username\r\n            ) {\r\n               following\r\n                  ? this.profile.followersCount++\r\n                  : this.profile.followersCount--;\r\n               this.profile.following = !this.profile.following;\r\n            }\r\n            if (\r\n               this.profile &&\r\n               this.profile.username === store.userStore.user?.username\r\n            ) {\r\n               following\r\n                  ? this.profile.followingCount++\r\n                  : this.profile.followingCount--;\r\n            }\r\n            this.followings.forEach((profile) => {\r\n               if (profile.username === username) {\r\n                  profile.following\r\n                     ? profile.followersCount--\r\n                     : profile.followersCount++;\r\n                  profile.following = !profile.following;\r\n               }\r\n            });\r\n\r\n            this.loading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => (this.loading = false));\r\n      }\r\n   };\r\n\r\n   loadFollowings = async (predicate: string) => {\r\n      this.loadingFollowings = true;\r\n      try {\r\n         const followings = await agent.Profiles.listFollowings(\r\n            this.profile!.username,\r\n            predicate\r\n         );\r\n         runInAction(() => {\r\n            this.followings = followings;\r\n            this.loadingFollowings = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => (this.loadingFollowings = false));\r\n      }\r\n   };\r\n\r\n   loadUserActivities = async (username: string, predicate?: string) => {\r\n      this.loadingActivities = true;\r\n      try {\r\n         const activities = await agent.Profiles.listActivities(\r\n            username,\r\n            predicate!\r\n         );\r\n         runInAction(() => {\r\n            this.userActivities = activities;\r\n            this.loadingActivities = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => {\r\n            this.loadingActivities = false;\r\n         });\r\n      }\r\n   };\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n   user: User | null = null;\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n   }\r\n\r\n   get isLoggedIn() {\r\n      return !!this.user;\r\n   }\r\n\r\n   login = async (creds: UserFormValues) => {\r\n      try {\r\n         const user = await agent.Account.login(creds);\r\n         store.commonStore.setToken(user.token);\r\n         runInAction(() => (this.user = user));\r\n         history.push(\"/activities\");\r\n         store.modalStore.closeModal();\r\n      } catch (error) {\r\n         throw error;\r\n      }\r\n   };\r\n\r\n   logout = () => {\r\n      store.commonStore.setToken(null);\r\n      window.localStorage.removeItem(\"jwt\");\r\n      this.user = null;\r\n      history.push(\"/\");\r\n   };\r\n\r\n   getUser = async () => {\r\n      try {\r\n         const user = await agent.Account.current();\r\n         runInAction(() => (this.user = user));\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   register = async (creds: UserFormValues) => {\r\n      try {\r\n         const user = await agent.Account.register(creds);\r\n         store.commonStore.setToken(user.token);\r\n         runInAction(() => (this.user = user));\r\n         history.push(\"/activities\");\r\n         store.modalStore.closeModal();\r\n      } catch (error) {\r\n         throw error;\r\n      }\r\n   };\r\n   setImage = (image: string) => {\r\n      if (this.user) {\r\n         this.user.image = image;\r\n      }\r\n   };\r\n\r\n   setDisplayName = (name: string) => {\r\n      if (this.user) this.user.displayName = name;\r\n   };\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n   activityStore: ActivityStore;\r\n   commonStore: CommonStore;\r\n   userStore: UserStore;\r\n   modalStore: ModalStore;\r\n   profileStore: ProfileStore;\r\n   commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n   activityStore: new ActivityStore(),\r\n   commonStore: new CommonStore(),\r\n   userStore: new UserStore(),\r\n   modalStore: new ModalStore(),\r\n   profileStore: new ProfileStore(),\r\n   commentStore: new CommentStore(),\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n   return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n   error: ServerError | null = null;\r\n   token: string | null = window.localStorage.getItem(\"jwt\");\r\n   appLoaded = false;\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n\r\n      reaction(\r\n         () => this.token,\r\n         (token) => {\r\n            if (token) {\r\n               window.localStorage.setItem(\"jwt\", token);\r\n            } else {\r\n               window.localStorage.removeItem(\"jwt\");\r\n            }\r\n         }\r\n      );\r\n   }\r\n\r\n   setServerError = (error: ServerError) => {\r\n      this.error = error;\r\n   };\r\n\r\n   setToken = (token: string | null) => {\r\n      this.token = token;\r\n   };\r\n\r\n   setAppLoaded = () => {\r\n      this.appLoaded = true;\r\n   };\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n   open: boolean;\r\n   body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n   modal: Modal = {\r\n      open: false,\r\n      body: null,\r\n   };\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n   }\r\n\r\n   openModal = (content: JSX.Element) => {\r\n      this.modal.open = true;\r\n      this.modal.body = content;\r\n   };\r\n\r\n   closeModal = () => {\r\n      this.modal.open = false;\r\n      this.modal.body = null;\r\n   };\r\n}\r\n","import {\r\n   HubConnection,\r\n   HubConnectionBuilder,\r\n   LogLevel,\r\n} from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n   comments: ChatComment[] = [];\r\n   hubConnection: HubConnection | null = null;\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n   }\r\n\r\n   createHubConnection = (activityId: string) => {\r\n      if (store.activityStore.selectedActivity) {\r\n         this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(\r\n               process.env.REACT_APP_CHAT_URL + \"?activityId=\" + activityId,\r\n               {\r\n                  accessTokenFactory: () => store.userStore.user?.token!,\r\n               }\r\n            )\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n         this.hubConnection\r\n            .start()\r\n            .catch((error) =>\r\n               console.log(\"Error establishing the connection: \", error)\r\n            );\r\n\r\n         this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n            runInAction(() => {\r\n               comments.forEach((comment) => {\r\n                  comment.createdAt = new Date(comment.createdAt + \"Z\");\r\n               });\r\n               this.comments = comments;\r\n            });\r\n         });\r\n\r\n         this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n            runInAction(() => {\r\n               comment.createdAt = new Date(comment.createdAt);\r\n               this.comments.unshift(comment);\r\n            });\r\n         });\r\n      }\r\n   };\r\n\r\n   stopHubConnection = () => {\r\n      this.hubConnection\r\n         ?.stop()\r\n         .catch((error) => console.log(\"Error stopping connection: \", error));\r\n   };\r\n\r\n   clearComments = () => {\r\n      this.comments = [];\r\n      this.stopHubConnection();\r\n   };\r\n\r\n   addComment = async (values: any) => {\r\n      values.activityId = store.activityStore.selectedActivity?.id;\r\n      try {\r\n         await this.hubConnection?.invoke(\"SendComment\", values);\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Menu, Image } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n   const {\r\n      userStore: { user, logout, isLoggedIn },\r\n   } = useStore();\r\n\r\n   return (\r\n      <Menu inverted fixed=\"top\">\r\n         <Container>\r\n            <Menu.Item as={NavLink} to=\"/\" exact header>\r\n               <img\r\n                  src=\"/assets/logo.png\"\r\n                  alt=\"logo\"\r\n                  style={{ marginRight: \"15px\" }}\r\n               />\r\n               Reactivities\r\n            </Menu.Item>\r\n            <Menu.Item name=\"Activities\" as={NavLink} to=\"/activities\" />\r\n            <Menu.Item name=\"Errors\" as={NavLink} to=\"/errors\" />\r\n            <Menu.Item>\r\n               <Button\r\n                  as={NavLink}\r\n                  to=\"/createActivity\"\r\n                  positive\r\n                  content=\"Create Activity\"\r\n               />\r\n            </Menu.Item>\r\n            {isLoggedIn ? (\r\n               <Menu.Item position=\"right\">\r\n                  <Image\r\n                     src={user?.image || \"/assets/user.png\"}\r\n                     avatar\r\n                     spaced=\"right\"\r\n                  />\r\n                  <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                     <Dropdown.Menu>\r\n                        <Dropdown.Item\r\n                           as={Link}\r\n                           to={`/profiles/${user?.username}`}\r\n                           text=\"My Profile\"\r\n                           icon=\"user\"\r\n                        />\r\n                        <Dropdown.Item\r\n                           onClick={logout}\r\n                           text=\"Logout\"\r\n                           icon=\"power\"\r\n                        />\r\n                     </Dropdown.Menu>\r\n                  </Dropdown>\r\n               </Menu.Item>\r\n            ) : (\r\n               \"\"\r\n            )}\r\n         </Container>\r\n      </Menu>\r\n   );\r\n});\r\n","import React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default function ActivityFilters() {\r\n   const {\r\n      activityStore: { predicate, setPredicate },\r\n   } = useStore();\r\n   return (\r\n      <>\r\n         <Menu vertical size=\"large\" style={{ width: \"100%\" }}>\r\n            <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\r\n            <Menu.Item\r\n               content=\"All Activities\"\r\n               active={predicate.has(\"all\")}\r\n               onClick={() => setPredicate(\"all\", \"true\")}\r\n            />\r\n            <Menu.Item\r\n               content=\"I'm going\"\r\n               active={predicate.has(\"isGoing\")}\r\n               onClick={() => setPredicate(\"isGoing\", \"true\")}\r\n            />\r\n            <Menu.Item\r\n               content=\"I'm hosting\"\r\n               active={predicate.has(\"isHost\")}\r\n               onClick={() => setPredicate(\"isHost\", \"true\")}\r\n            />\r\n         </Menu>\r\n         <Header />\r\n         <Calendar\r\n            onChange={(date) => setPredicate(\"startDate\", date as Date)}\r\n            value={predicate.get(\"startDate\") || new Date()}\r\n         />\r\n      </>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n   profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n   const { profileStore, userStore } = useStore();\r\n   const { updateFollowing, loading } = profileStore;\r\n\r\n   if (userStore.user?.username === profile.username) return null;\r\n\r\n   function handleFollow(e: SyntheticEvent, username: string) {\r\n      e.preventDefault();\r\n      profile.following\r\n         ? updateFollowing(username, false)\r\n         : updateFollowing(username, true);\r\n   }\r\n\r\n   return (\r\n      <Reveal animated=\"move\">\r\n         <Reveal.Content visible style={{ width: \"100%\" }}>\r\n            <Button\r\n               fluid\r\n               color=\"teal\"\r\n               content={profile.following ? \"Following\" : \"Not Following\"}\r\n            />\r\n         </Reveal.Content>\r\n         <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n            <Button\r\n               fluid\r\n               basic\r\n               color={profile.following ? \"red\" : \"green\"}\r\n               content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n               loading={loading}\r\n               onClick={(e) => handleFollow(e, profile.username)}\r\n            />\r\n         </Reveal.Content>\r\n      </Reveal>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n   profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n   function truncate(str: string | undefined) {\r\n      if (str) {\r\n         return str.length > 40 ? str.substring(0, 37) + \"...\" : str;\r\n      }\r\n   }\r\n   return (\r\n      <Card as={Link} to={`/profiles/${profile.username}`}>\r\n         <Image src={profile.image || \"/assets/user.png\"} />\r\n         <Card.Content>\r\n            <Card.Header>{profile.displayName}</Card.Header>\r\n            <Card.Description>{truncate(profile.bio)}</Card.Description>{\" \"}\r\n         </Card.Content>\r\n         <Card.Content extra>\r\n            <Icon name=\"user\" />\r\n            {profile.followersCount} followers\r\n         </Card.Content>\r\n         <FollowButton profile={profile} />\r\n      </Card>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n   attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({\r\n   attendees,\r\n}: Props) {\r\n   const styles = {\r\n      borderColor: \"orange\",\r\n      borderWidth: 3,\r\n   };\r\n   return (\r\n      <List horizontal>\r\n         {attendees.map((attendee) => (\r\n            <Popup\r\n               hoverable\r\n               key={attendee.username}\r\n               trigger={\r\n                  <List.Item\r\n                     key={attendee.username}\r\n                     as={Link}\r\n                     to={`/profiles/${attendee.username}`}\r\n                  >\r\n                     <Image\r\n                        size=\"mini\"\r\n                        circular\r\n                        src={attendee.image || \"/assets/user.png\"}\r\n                        bordered\r\n                        style={attendee.following ? styles : null}\r\n                     />\r\n                  </List.Item>\r\n               }\r\n            >\r\n               <Popup.Content>\r\n                  <ProfileCard profile={attendee} />\r\n               </Popup.Content>\r\n            </Popup>\r\n         ))}\r\n      </List>\r\n   );\r\n});\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n   return (\r\n      <Segment.Group>\r\n         <Segment>\r\n            {activity.isCancelled && (\r\n               <Label\r\n                  attached=\"top\"\r\n                  color=\"red\"\r\n                  content=\"Cancelled\"\r\n                  style={{ textAlign: \"center\" }}\r\n               />\r\n            )}\r\n            <Item.Group>\r\n               <Item>\r\n                  <Item.Image\r\n                     style={{ marginBottom: 3 }}\r\n                     size=\"tiny\"\r\n                     circular\r\n                     src={activity.host?.image || \"/assets/user.png\"}\r\n                  />\r\n                  <Item.Content>\r\n                     <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                        {activity.title}\r\n                     </Item.Header>\r\n                     <Item.Description>\r\n                        Hosted by\r\n                        <Link to={`/profiles/${activity.hostUsername}`}>\r\n                           {\" \"}\r\n                           {activity.host?.displayName}\r\n                        </Link>\r\n                        {activity.isHost && (\r\n                           <Item.Description>\r\n                              <Label basic color=\"orange\">\r\n                                 You are hosting this acitivty\r\n                              </Label>\r\n                           </Item.Description>\r\n                        )}\r\n                        {activity.isGoing && !activity.isHost && (\r\n                           <Item.Description>\r\n                              <Label basic color=\"green\">\r\n                                 You are attending this acitivty\r\n                              </Label>\r\n                           </Item.Description>\r\n                        )}\r\n                     </Item.Description>\r\n                  </Item.Content>\r\n               </Item>\r\n            </Item.Group>\r\n         </Segment>\r\n         <Segment>\r\n            <span>\r\n               <Icon name=\"clock\" />{\" \"}\r\n               {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n               <Icon name=\"marker\" /> {activity.venue}\r\n            </span>\r\n         </Segment>\r\n         <Segment secondary>\r\n            <ActivityListItemAttendee attendees={activity.attendees!} />\r\n         </Segment>\r\n         <Segment clearing>\r\n            <span> {activity.description} </span>\r\n            <Button\r\n               as={Link}\r\n               to={`/activities/${activity.id}`}\r\n               color=\"teal\"\r\n               floated=\"right\"\r\n               content=\"View\"\r\n            />\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivitiyListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub color=\"teal\">\r\n            {group}\r\n          </Header>\r\n              {activities.map((activity) => (\r\n                <ActivityListItem key={activity.id} activity={activity} />\r\n              ))}\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n});\r\n","import React, { Fragment } from \"react\";\r\nimport { Segment, Button, Placeholder } from \"semantic-ui-react\";\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n   return (\r\n      <Fragment>\r\n         <Placeholder fluid style={{ marginTop: 25 }}>\r\n            <Segment.Group>\r\n               <Segment style={{ minHeight: 110 }}>\r\n                  <Placeholder>\r\n                     <Placeholder.Header image>\r\n                        <Placeholder.Line />\r\n                        <Placeholder.Line />\r\n                     </Placeholder.Header>\r\n                     <Placeholder.Paragraph>\r\n                        <Placeholder.Line />\r\n                     </Placeholder.Paragraph>\r\n                  </Placeholder>\r\n               </Segment>\r\n               <Segment>\r\n                  <Placeholder>\r\n                     <Placeholder.Line />\r\n                     <Placeholder.Line />\r\n                  </Placeholder>\r\n               </Segment>\r\n               <Segment secondary style={{ minHeight: 70 }} />\r\n               <Segment clearing>\r\n                  <Button\r\n                     disabled\r\n                     color=\"blue\"\r\n                     floated=\"right\"\r\n                     content=\"View\"\r\n                  />\r\n               </Segment>\r\n            </Segment.Group>\r\n         </Placeholder>\r\n      </Fragment>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n   const { activityStore } = useStore();\r\n   const { loadActivities, activityRegistry, setPagingParams, pagination } =\r\n      activityStore;\r\n   const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n   function handleGetNext() {\r\n      setLoadingNext(true);\r\n      setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n      loadActivities().then(() => setLoadingNext(false));\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n   }, [activityRegistry.size, loadActivities]);\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width=\"10\">\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n               <>\r\n                  <ActivityListItemPlaceholder />\r\n                  <ActivityListItemPlaceholder />\r\n               </>\r\n            ) : (\r\n               <InfiniteScroll\r\n                  pageStart={0}\r\n                  loadMore={handleGetNext}\r\n                  hasMore={\r\n                     !loadingNext &&\r\n                     !!pagination &&\r\n                     pagination.currentPage < pagination.totalPages\r\n                  }\r\n                  initialLoad={false}\r\n               >\r\n                  <ActivityList />\r\n               </InfiniteScroll>\r\n            )}\r\n         </Grid.Column>\r\n         <Grid.Column width=\"6\">\r\n            <ActivityFilters />\r\n         </Grid.Column>\r\n         <Grid.Column width={10}>\r\n            <Loader active={loadingNext} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n});\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   placeholder: string;\r\n   name: string;\r\n   type?: string;\r\n   label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n   const [field, meta] = useField(props.name);\r\n   return (\r\n      <Form.Field error={meta.touched && !!meta.error}>\r\n         <label> {props.label}</label>\r\n         <input {...field} {...props} />\r\n         {meta.touched && meta.error ? (\r\n            <Label basic color=\"red\">\r\n               {meta.error}\r\n            </Label>\r\n         ) : null}\r\n      </Form.Field>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n   const { userStore } = useStore();\r\n   return (\r\n      <Formik\r\n         initialValues={{ email: \"\", password: \"\", error: null }}\r\n         onSubmit={(values, { setErrors }) =>\r\n            userStore\r\n               .login(values)\r\n               .catch((error) =>\r\n                  setErrors({ error: \"Invalid email or password\" })\r\n               )\r\n         }\r\n      >\r\n         {({ handleSubmit, isSubmitting, errors }) => (\r\n            <Form\r\n               className=\"ui form\"\r\n               onSubmit={handleSubmit}\r\n               autoComplete=\"off\"\r\n            >\r\n               <Header\r\n                  as=\"h2\"\r\n                  content=\"Login to Reactivities\"\r\n                  color=\"teal\"\r\n                  textAlign=\"center\"\r\n               />\r\n               <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n               <MyTextInput\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  type=\"password\"\r\n               />\r\n               <ErrorMessage\r\n                  name=\"error\"\r\n                  render={() => (\r\n                     <Label\r\n                        style={{ marginBottom: 10 }}\r\n                        basic\r\n                        color=\"red\"\r\n                        content={errors.error}\r\n                     />\r\n                  )}\r\n               />\r\n               <Button\r\n                  loading={isSubmitting}\r\n                  positive\r\n                  content=\"Login\"\r\n                  type=\"submit\"\r\n                  fluid\r\n               />\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   );\r\n});\r\n","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n   return (\r\n      <Message error>\r\n         {errors && (\r\n            <Message.List>\r\n               {errors.map((err: any, i: any) => (\r\n                  <Message.Item key={i}>{err}</Message.Item>\r\n               ))}\r\n            </Message.List>\r\n         )}\r\n      </Message>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function LoginForm() {\r\n   const { userStore } = useStore();\r\n\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            displayName: \"\",\r\n            username: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            error: null,\r\n         }}\r\n         onSubmit={(values, { setErrors }) =>\r\n            userStore.register(values).catch((error) => setErrors({ error }))\r\n         }\r\n         validationSchema={Yup.object({\r\n            displayName: Yup.string().required(),\r\n            username: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n         })}\r\n      >\r\n         {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n            <Form\r\n               className=\"ui form error\"\r\n               onSubmit={handleSubmit}\r\n               autoComplete=\"off\"\r\n            >\r\n               <Header\r\n                  as=\"h2\"\r\n                  content=\"Sign Up to Reactivities\"\r\n                  color=\"teal\"\r\n                  textAlign=\"center\"\r\n               />\r\n               <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n               <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n               <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n               <MyTextInput\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  type=\"password\"\r\n               />\r\n               <ErrorMessage\r\n                  name=\"error\"\r\n                  render={() => <ValidationErrors errors={errors.error} />}\r\n               />\r\n               <Button\r\n                  disabled={!isValid || !dirty || isSubmitting}\r\n                  loading={isSubmitting}\r\n                  positive\r\n                  content=\"Register\"\r\n                  type=\"submit\"\r\n                  fluid\r\n               />\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n   const { userStore, modalStore } = useStore();\r\n\r\n   return (\r\n      <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n         <Container text>\r\n            <Header as=\"h1\" inverted>\r\n               <Image\r\n                  size=\"massive\"\r\n                  src=\"/assets/logo.png\"\r\n                  alt=\"logo\"\r\n                  style={{ marginBottom: 12 }}\r\n               />\r\n               Reactivities\r\n            </Header>\r\n            {userStore.isLoggedIn ? (\r\n               <>\r\n                  <Header as=\"h2\" inverted content=\"Welcome to reactivities\" />\r\n                  <Button as={Link} to={\"/activities\"} size=\"huge\" inverted>\r\n                     Goto Activities!\r\n                  </Button>\r\n               </>\r\n            ) : (\r\n               <>\r\n                  <Button\r\n                     onClick={() => modalStore.openModal(<LoginForm />)}\r\n                     size=\"huge\"\r\n                     inverted\r\n                  >\r\n                     Login!\r\n                  </Button>\r\n                  <Button\r\n                     onClick={() => modalStore.openModal(<RegisterForm />)}\r\n                     size=\"huge\"\r\n                     inverted\r\n                  >\r\n                     Register!\r\n                  </Button>\r\n               </>\r\n            )}\r\n         </Container>\r\n      </Segment>\r\n   );\r\n});\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n      inverted ?: boolean;\r\n      content ?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted=true, content='Loading...'} : Props){\r\n      return (\r\n            <Dimmer active={true} inverted={inverted}>\r\n                  <Loader content ={content}/>\r\n            </Dimmer>\r\n      )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   placeholder: string;\r\n   name: string;\r\n   rows: number;\r\n   label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n   const [field, meta] = useField(props.name);\r\n   return (\r\n      <Form.Field error={meta.touched && !!meta.error}>\r\n         <label> {props.label}</label>\r\n         <textarea {...field} {...props} />\r\n         {meta.touched && meta.error ? (\r\n            <Label basic color=\"red\">\r\n               {meta.error}\r\n            </Label>\r\n         ) : null}\r\n      </Form.Field>\r\n   );\r\n}\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   placeholder: string;\r\n   options: any;\r\n   name: string;\r\n   label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n   const [field, meta, helpers] = useField(props.name);\r\n   return (\r\n      <Form.Field error={meta.touched && !!meta.error}>\r\n         <label> {props.label}</label>\r\n         <Select\r\n            clearable\r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e, d) => helpers.setValue(d.value)}\r\n            onBlur={() => helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n         />\r\n         {meta.touched && meta.error ? (\r\n            <Label basic color=\"red\">\r\n               {meta.error}\r\n            </Label>\r\n         ) : null}\r\n      </Form.Field>\r\n   );\r\n}\r\n","export const categoryOptions = [\r\n   { text: \"Drinks\", value: \"drinks\" },\r\n   { text: \"culture\", value: \"culture\" },\r\n   { text: \"Film\", value: \"film\" },\r\n   { text: \"Food\", value: \"food\" },\r\n   { text: \"Music\", value: \"music\" },\r\n   { text: \"Travel\", value: \"travel\" },\r\n]\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n   const [field, meta, helpers] = useField(props.name!);\r\n   return (\r\n      <Form.Field error={meta.touched && !!meta.error}>\r\n         <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={(value) => helpers.setValue(value)}\r\n         />\r\n         {meta.touched && meta.error ? (\r\n            <Label basic color=\"red\">\r\n               {meta.error}\r\n            </Label>\r\n         ) : null}\r\n      </Form.Field>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n   const history = useHistory();\r\n   const { activityStore } = useStore();\r\n   const {\r\n      createActivity,\r\n      updateActivity,\r\n      loadActivity,\r\n      loadingInitial,\r\n   } = activityStore;\r\n   const { id } = useParams<{ id: string }>();\r\n\r\n   const [activity, setActivity] = useState<ActivityFormValues>(\r\n      new ActivityFormValues()\r\n   );\r\n\r\n   const validationSchema = Yup.object({\r\n      title: Yup.string().required(\"The activity title is required\"),\r\n      description: Yup.string().required(\r\n         \"The activity description is required\"\r\n      ),\r\n      category: Yup.string().required(),\r\n      date: Yup.string().required(\"Date is required\").nullable(),\r\n      venue: Yup.string().required(),\r\n      city: Yup.string().required(),\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (id)\r\n         loadActivity(id).then((activity) =>\r\n            setActivity(new ActivityFormValues(activity))\r\n         );\r\n   }, [id, loadActivity]);\r\n\r\n   function handleFormSubmit(activity: ActivityFormValues) {\r\n      if (!activity.id) {\r\n         let newActivity = {\r\n            ...activity,\r\n            id: uuid(),\r\n         };\r\n         createActivity(newActivity).then(() =>\r\n            history.push(`/activities/${newActivity.id}`)\r\n         );\r\n      } else {\r\n         updateActivity(activity).then(() => history.push(`/activities/${id}`));\r\n      }\r\n   }\r\n\r\n   if (loadingInitial)\r\n      return <LoadingComponent content=\"Loading activity...\" />;\r\n\r\n   return (\r\n      <Segment clearing>\r\n         <Header content=\"Activity Details\" sub color=\"teal\" />\r\n         <Formik\r\n            validationSchema={validationSchema}\r\n            enableReinitialize\r\n            initialValues={activity}\r\n            onSubmit={(values) => handleFormSubmit(values)}\r\n         >\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n               <Form\r\n                  className=\"ui form\"\r\n                  onSubmit={handleSubmit}\r\n                  autoComplete=\"off\"\r\n               >\r\n                  <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                  <MyTextArea\r\n                     rows={3}\r\n                     placeholder=\"Description\"\r\n                     name=\"description\"\r\n                  />\r\n                  <MySelectInput\r\n                     options={categoryOptions}\r\n                     placeholder=\"Category\"\r\n                     name=\"category\"\r\n                  />\r\n                  <MyDateInput\r\n                     placeholderText=\"Date\"\r\n                     name=\"date\"\r\n                     showTimeSelect\r\n                     timeCaption=\"time\"\r\n                     dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                  />\r\n                  <Header content=\"Location Details\" sub color=\"teal\" />\r\n\r\n                  <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                  <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                  <Button\r\n                     disabled={isSubmitting || !dirty || !isValid}\r\n                     loading={isSubmitting}\r\n                     floated=\"right\"\r\n                     positive\r\n                     type=\"submit\"\r\n                     content=\"Submit\"\r\n                  />\r\n                  <Button\r\n                     as={Link}\r\n                     to={`/activities`}\r\n                     floated=\"right\"\r\n                     content=\"Cancel\"\r\n                  />\r\n               </Form>\r\n            )}\r\n         </Formik>\r\n      </Segment>\r\n   );\r\n});\r\n","import { Formik, Form, Field, FieldProps } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Header, Comment, Loader } from \"semantic-ui-react\";\r\nimport * as Yup from \"yup\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n   activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n   const { commentStore } = useStore();\r\n\r\n   useEffect(() => {\r\n      if (activityId) {\r\n         commentStore.createHubConnection(activityId);\r\n      }\r\n      return () => {\r\n         commentStore.clearComments();\r\n      };\r\n   }, [commentStore, activityId]);\r\n\r\n   return (\r\n      <>\r\n         <Segment\r\n            textAlign=\"center\"\r\n            attached=\"top\"\r\n            inverted\r\n            color=\"teal\"\r\n            style={{ border: \"none\" }}\r\n         >\r\n            <Header>Chat about this event</Header>\r\n         </Segment>\r\n         <Segment attached clearing>\r\n            <Formik\r\n               onSubmit={(values, { resetForm }) =>\r\n                  commentStore.addComment(values).then(() => resetForm())\r\n               }\r\n               initialValues={{ body: \"\" }}\r\n               validationSchema={Yup.object({\r\n                  body: Yup.string().required(),\r\n               })}\r\n            >\r\n               {({ isSubmitting, isValid, handleSubmit }) => (\r\n                  <Form className=\"ui form\">\r\n                     <Field name=\"body\">\r\n                        {(props: FieldProps) => (\r\n                           <div style={{ position: \"relative\" }}>\r\n                              <Loader active={isSubmitting} />\r\n                              <textarea\r\n                                 placeholder=\"Enter your comment (Enter to submit, SHIFT + enter for new line)\"\r\n                                 rows={2}\r\n                                 {...props.field}\r\n                                 onKeyPress={(e) => {\r\n                                    if (e.key === \"Enter\" && e.shiftKey) {\r\n                                       return;\r\n                                    }\r\n                                    if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                       e.preventDefault();\r\n                                       isValid && handleSubmit();\r\n                                    }\r\n                                 }}\r\n                              />\r\n                           </div>\r\n                        )}\r\n                     </Field>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n            <Comment.Group>\r\n               {commentStore.comments.map((comment) => (\r\n                  <Comment key={comment.id}>\r\n                     <Comment.Avatar\r\n                        src={comment.image || \"/assets/user.png\"}\r\n                     />\r\n                     <Comment.Content>\r\n                        <Comment.Author\r\n                           as={Link}\r\n                           to={`/profiles/${comment.username}`}\r\n                        >\r\n                           {comment.displayName}\r\n                        </Comment.Author>\r\n                        <Comment.Metadata>\r\n                           <div>\r\n                              {formatDistanceToNow(comment.createdAt)} ago\r\n                           </div>\r\n                        </Comment.Metadata>\r\n                        <Comment.Text style={{ whiteSpace: \"pre-wrap\" }}>\r\n                           {comment.body}\r\n                        </Comment.Text>\r\n                     </Comment.Content>\r\n                  </Comment>\r\n               ))}\r\n            </Comment.Group>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n   filter: \"brightness(30%)\",\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n   position: \"absolute\",\r\n   bottom: \"5%\",\r\n   left: \"5%\",\r\n   width: \"100%\",\r\n   height: \"auto\",\r\n   color: \"white\",\r\n};\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n   const {\r\n      activityStore: { updateAttendace, loading, cancelActivityToggle },\r\n   } = useStore();\r\n   return (\r\n      <Segment.Group>\r\n         <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n            {activity.isCancelled && (\r\n                  <Label\r\n                     style={{\r\n                        position: \"absolute\",\r\n                        zIndex: 1000,\r\n                        left: -14,\r\n                        top: 20,\r\n                     }}\r\n                     ribbon\r\n                     color=\"red\"\r\n                     content=\"Cancelled\"\r\n                  />\r\n               )}\r\n            <Image\r\n               src={`/assets/categoryImages/${activity.category}.jpg`}\r\n               fluid\r\n               style={activityImageStyle}\r\n            />\r\n            <Segment style={activityImageTextStyle} basic>\r\n               <Item.Group>\r\n                  <Item>\r\n                     <Item.Content>\r\n                        <Header\r\n                           size=\"huge\"\r\n                           content={activity.title}\r\n                           style={{ color: \"white\" }}\r\n                        />\r\n                        <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                        <p>\r\n                           Hosted by{\" \"}\r\n                           <strong>\r\n                              <Link to={`/profiles/${activity.host?.username}`}>\r\n                                 {activity.host?.displayName}\r\n                              </Link>\r\n                           </strong>\r\n                        </p>\r\n                     </Item.Content>\r\n                  </Item>\r\n               </Item.Group>\r\n            </Segment>\r\n         </Segment>\r\n         <Segment clearing attached=\"bottom\">\r\n            {activity.isHost ? (\r\n               <>\r\n                  <Button\r\n                     color={activity.isCancelled ? \"green\" : \"red\"}\r\n                     floated=\"left\"\r\n                     basic\r\n                     content={\r\n                        activity.isCancelled\r\n                           ? \"Re-activate Activity\"\r\n                           : \"Cancel Activity\"\r\n                     }\r\n                     onClick={cancelActivityToggle}\r\n                     loading={loading}\r\n                  />\r\n                  <Button\r\n                     disabled={activity.isCancelled}\r\n                     as={Link}\r\n                     to={`/manage/${activity.id}`}\r\n                     color=\"orange\"\r\n                     floated=\"right\"\r\n                  >\r\n                     Manage Event\r\n                  </Button>\r\n               </>\r\n            ) : activity.isGoing ? (\r\n               <Button loading={loading} onClick={updateAttendace}>\r\n                  Cancel attendance\r\n               </Button>\r\n            ) : (\r\n               <Button\r\n                  disabled={activity.isCancelled}\r\n                  loading={loading}\r\n                  color=\"teal\"\r\n                  onClick={updateAttendace}\r\n               >\r\n                  Join Activity\r\n               </Button>\r\n            )}\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n   return (\r\n      <Segment.Group>\r\n         <Segment attached=\"top\">\r\n            <Grid>\r\n               <Grid.Column width={1}>\r\n                  <Icon size=\"large\" color=\"teal\" name=\"info\" />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <p>{activity.description}</p>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign=\"middle\">\r\n               <Grid.Column width={1}>\r\n                  <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign=\"middle\">\r\n               <Grid.Column width={1}>\r\n                  <Icon name=\"marker\" size=\"large\" color=\"teal\" />\r\n               </Grid.Column>\r\n               <Grid.Column width={11}>\r\n                  <span>\r\n                     {activity.venue}, {activity.city}\r\n                  </span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});\r\n","import React from \"react\";\r\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Activity } from \"../../app/models/activity\";\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({\r\n   activity: { attendees, host },\r\n}: Props) {\r\n   if (!attendees) return null;\r\n   return (\r\n      <>\r\n         <Segment\r\n            textAlign=\"center\"\r\n            style={{ border: \"none\" }}\r\n            attached=\"top\"\r\n            secondary\r\n            inverted\r\n            color=\"teal\"\r\n         >\r\n            {attendees.length}\r\n            {attendees.length === 1 ? \" Person\" : \" People\"} going\r\n         </Segment>\r\n         <Segment attached>\r\n            <List relaxed divided>\r\n               {attendees.map((attendee) => (\r\n                  <Item\r\n                     style={{ position: \"relative\" }}\r\n                     key={attendee.username}\r\n                  >\r\n                     {attendee.username === host?.username && (\r\n                        <Label\r\n                           style={{ position: \"absolute\" }}\r\n                           color=\"orange\"\r\n                           ribbon=\"right\"\r\n                        >\r\n                           Host\r\n                        </Label>\r\n                     )}\r\n\r\n                     <Image\r\n                        size=\"tiny\"\r\n                        src={attendee.image || \"/assets/user.png\"}\r\n                     />\r\n                     <Item.Content verticalAlign=\"middle\">\r\n                        <Item.Header as=\"h3\">\r\n                           <Link to={`/profiles/${attendee.username}`}>\r\n                              {attendee.displayName}\r\n                           </Link>\r\n                        </Item.Header>\r\n                        {attendee.following && (\r\n                           <Item.Extra style={{ color: \"orange\" }}>\r\n                              Following\r\n                           </Item.Extra>\r\n                        )}\r\n                     </Item.Content>\r\n                  </Item>\r\n               ))}\r\n            </List>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n   const { activityStore } = useStore();\r\n   const {\r\n      selectedActivity: activity,\r\n      loadActivity,\r\n      loadingInitial,\r\n      clearSelectedActivity,\r\n   } = activityStore;\r\n   const { id } = useParams<{ id: string }>();\r\n\r\n   useEffect(() => {\r\n      if (id) loadActivity(id);\r\n      return () => clearSelectedActivity();\r\n   }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n   if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width={10}>\r\n            <ActivityDetailedHeader activity={activity} />\r\n            <ActivityDetailedInfo activity={activity} />\r\n            <ActivityDetailedChat activityId={activity.id} />\r\n         </Grid.Column>\r\n         <Grid.Column width={6}>\r\n            <ActivityDetailedSidebar activity={activity} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n   const baseUrl = process.env.REACT_APP_API_URL;\r\n   const [errors, setErrors] = useState(null);\r\n\r\n   function handleNotFound() {\r\n      axios\r\n         .get(baseUrl + \"buggy/not-found\")\r\n         .catch((err) => console.log(err.response));\r\n   }\r\n\r\n   function handleBadRequest() {\r\n      axios\r\n         .get(baseUrl + \"buggy/bad-request\")\r\n         .catch((err) => console.log(err.response));\r\n   }\r\n\r\n   function handleServerError() {\r\n      axios\r\n         .get(baseUrl + \"buggy/server-error\")\r\n         .catch((err) => console.log(err.response));\r\n   }\r\n\r\n   function handleUnauthorised() {\r\n      axios\r\n         .get(baseUrl + \"buggy/unauthorised\")\r\n         .catch((err) => console.log(err.response));\r\n   }\r\n\r\n   function handleBadGuid() {\r\n      axios\r\n         .get(baseUrl + \"activities/notaguid\")\r\n         .catch((err) => console.log(err));\r\n   }\r\n\r\n   function handleValidationError() {\r\n      axios.post(baseUrl + \"activities\", {}).catch((err) => setErrors(err));\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header as=\"h1\" content=\"Test Error component\" />\r\n         <Segment>\r\n            <Button.Group widths=\"7\">\r\n               <Button\r\n                  onClick={handleNotFound}\r\n                  content=\"Not Found\"\r\n                  basic\r\n                  primary\r\n               />\r\n               <Button\r\n                  onClick={handleBadRequest}\r\n                  content=\"Bad Request\"\r\n                  basic\r\n                  primary\r\n               />\r\n               <Button\r\n                  onClick={handleValidationError}\r\n                  content=\"Validation Error\"\r\n                  basic\r\n                  primary\r\n               />\r\n               <Button\r\n                  onClick={handleServerError}\r\n                  content=\"Server Error\"\r\n                  basic\r\n                  primary\r\n               />\r\n               <Button\r\n                  onClick={handleUnauthorised}\r\n                  content=\"Unauthorised\"\r\n                  basic\r\n                  primary\r\n               />\r\n               <Button\r\n                  onClick={handleBadGuid}\r\n                  content=\"Bad Guid\"\r\n                  basic\r\n                  primary\r\n               />\r\n            </Button.Group>\r\n         </Segment>\r\n         {errors && <ValidationErrors errors={errors} />}\r\n      </>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n   Button,\r\n   Header,\r\n   Icon,\r\n   Segment,\r\n   SegmentInline,\r\n} from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n   return (\r\n      <Segment placeholder>\r\n         <Header icon>\r\n            <Icon name=\"search\" />\r\n            Oops - we've looked everywhere and could not find this.\r\n         </Header>\r\n         <SegmentInline>\r\n            <Button as={Link} to=\"/activities\" primary>\r\n               Return to activities page\r\n            </Button>\r\n         </SegmentInline>\r\n      </Segment>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n   const { commonStore } = useStore();\r\n   return (\r\n      <Container>\r\n         <Header as=\"h1\" content=\"Server Error\" />\r\n         <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\r\n         {commonStore.error?.details && (\r\n            <Segment>\r\n               <Header as=\"h4\" content=\"Stack Trave\" color=\"teal\" />\r\n               <code style={{ marginTop: \"10px\" }}>\r\n                  {commonStore.error.details}\r\n               </code>\r\n            </Segment>\r\n         )}\r\n      </Container>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n   const { modalStore } = useStore();\r\n\r\n   return (\r\n      <Modal\r\n         open={modalStore.modal.open}\r\n         onClose={modalStore.closeModal}\r\n         size=\"mini\"\r\n      >\r\n         <Modal.Content>{modalStore.modal.body}</Modal.Content>\r\n      </Modal>\r\n   );\r\n});\r\n","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface Props {\r\n   setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n   const {\r\n      profileStore: { profile, updateProfile },\r\n   } = useStore();\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            displayName: profile?.displayName,\r\n            bio: profile?.bio,\r\n         }}\r\n         onSubmit={(values) => {\r\n            updateProfile(values).then(() => {\r\n               setEditMode(false);\r\n            });\r\n         }}\r\n         validationSchema={Yup.object({\r\n            displayName: Yup.string().required(),\r\n         })}\r\n      >\r\n         {({ isSubmitting, isValid, dirty }) => (\r\n            <Form className=\"ui form\">\r\n               <MyTextInput placeholder=\"Display Name\" name=\"displayName\" />\r\n               <MyTextArea rows={3} placeholder=\"Add your bio\" name=\"bio\" />\r\n               <Button\r\n                  positive\r\n                  type=\"submit\"\r\n                  loading={isSubmitting}\r\n                  content=\"Update profile\"\r\n                  floated=\"right\"\r\n                  disabled={!isValid || !dirty}\r\n               />\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n   const { profileStore } = useStore();\r\n   const { isCurrentUser, profile } = profileStore;\r\n   const [editMode, setEditMode] = useState(false);\r\n\r\n   return (\r\n      <Tab.Pane>\r\n         <Grid>\r\n            <Grid.Column width=\"16\">\r\n               <Header\r\n                  floated=\"left\"\r\n                  icon=\"user\"\r\n                  content={`About ${profile?.displayName}`}\r\n               />\r\n               {isCurrentUser && (\r\n                  <Button\r\n                     floated=\"right\"\r\n                     basic\r\n                     content={editMode ? \"Cancel\" : \"Edit Profile\"}\r\n                     onClick={() => setEditMode(!editMode)}\r\n                  />\r\n               )}\r\n            </Grid.Column>\r\n            <Grid.Column width=\"16\">\r\n               {editMode ? (\r\n                  <ProfileEditForm setEditMode={setEditMode} />\r\n               ) : (\r\n                  <span style={{ whiteSpace: \"pre-wrap\" }}>{profile?.bio}</span>\r\n               )}\r\n            </Grid.Column>\r\n         </Grid>\r\n      </Tab.Pane>\r\n   );\r\n});\r\n","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n   { menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n   { menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n   { menuItem: \"Hosting\", pane: { key: \"hosting\" } },\r\n];\r\nexport default observer(function ProfileActivities() {\r\n   const { profileStore } = useStore();\r\n   const { loadUserActivities, profile, loadingActivities, userActivities } =\r\n      profileStore;\r\n\r\n   useEffect(() => {\r\n      loadUserActivities(profile!.username);\r\n   }, [loadUserActivities, profile]);\r\n\r\n   const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n      loadUserActivities(\r\n         profile!.username,\r\n         panes[data.activeIndex as number].pane.key\r\n      );\r\n   };\r\n   return (\r\n      <Tab.Pane loading={loadingActivities}>\r\n         <Grid>\r\n            <Grid.Column width={16}>\r\n               <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n               <Tab\r\n                  panes={panes}\r\n                  menu={{ secondary: true, pointing: true }}\r\n                  onTabChange={(e, data) => handleTabChange(e, data)}\r\n               />\r\n               <br />\r\n               <Card.Group itemsPerRow={4}>\r\n                  {userActivities.map((activity: UserActivity) => (\r\n                     <Card\r\n                        as={Link}\r\n                        to={`/activities/${activity.id}`}\r\n                        key={activity.id}\r\n                     >\r\n                        <Image\r\n                           src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                           style={{ minHeight: 100, objectFit: \"cover\" }}\r\n                        />\r\n                        <Card.Content>\r\n                           <Card.Header textAlign=\"center\">\r\n                              {activity.title}\r\n                           </Card.Header>\r\n                           <Card.Meta textAlign=\"center\">\r\n                              <div>\r\n                                 {format(new Date(activity.date), \"do LLL\")}\r\n                              </div>\r\n                              <div>\r\n                                 {format(new Date(activity.date), \"h:mm a\")}\r\n                              </div>\r\n                           </Card.Meta>\r\n                        </Card.Content>\r\n                     </Card>\r\n                  ))}\r\n               </Card.Group>\r\n            </Grid.Column>\r\n         </Grid>\r\n      </Tab.Pane>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n   const { profileStore } = useStore();\r\n   const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n   return (\r\n      <Tab.Pane loading={loadingFollowings}>\r\n         <Grid>\r\n            <Grid.Column width={16}>\r\n               <Header\r\n                  floated=\"left\"\r\n                  icon=\"user\"\r\n                  content={\r\n                     activeTab === 3\r\n                        ? `People following ${profile?.displayName}`\r\n                        : `People ${profile?.displayName} is following`\r\n                  }\r\n               />\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n               <Card.Group itemsPerRow={4}>\r\n                  {followings.map((profile) => (\r\n                     <ProfileCard key={profile.username} profile={profile} />\r\n                  ))}\r\n               </Card.Group>\r\n            </Grid.Column>\r\n         </Grid>\r\n      </Tab.Pane>\r\n   );\r\n});\r\n","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n   imagePreview: string;\r\n   setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({\r\n   imagePreview,\r\n   setCropper,\r\n}: Props) {\r\n   return (\r\n      <Cropper\r\n         src={imagePreview}\r\n         style={{ height: 200, width: \"100%\" }}\r\n         initialAspectRatio={1}\r\n         aspectRatio={1}\r\n         preview=\".img-preview\"\r\n         guides={false}\r\n         viewMode={1}\r\n         autoCropArea={1}\r\n         background={false}\r\n         onInitialized={(cropper) => setCropper(cropper)}\r\n      />\r\n   );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n   const dzStyles = {\r\n      border: \"dashed 3px #eee\",\r\n      borderColor: \"#eee\",\r\n      borderRadius: \"5px\",\r\n      paddingTop: \"30px\",\r\n      textAlign: \"center\" as \"center\",\r\n      height: 200,\r\n   };\r\n\r\n   const dzActive = {\r\n      borderColor: \"green\",\r\n   };\r\n\r\n   const onDrop = useCallback(\r\n      (acceptedFiles) => {\r\n         setFiles(\r\n            acceptedFiles.map((file: any) =>\r\n               Object.assign(file, {\r\n                  preview: URL.createObjectURL(file),\r\n               })\r\n            )\r\n         );\r\n      },\r\n      [setFiles]\r\n   );\r\n   const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      onDrop,\r\n   });\r\n\r\n   return (\r\n      <div\r\n         {...getRootProps()}\r\n         style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}\r\n      >\r\n         <input {...getInputProps()} />\r\n         <Icon name=\"upload\" size=\"huge\" />\r\n         <Header content=\"Drop image here\" />\r\n      </div>\r\n   );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n   loading: boolean;\r\n   uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n   const [files, setFiles] = useState<any>([]);\r\n   const [cropper, setCropper] = useState<Cropper>();\r\n\r\n   function onCrop() {\r\n      if (cropper) {\r\n         cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      return () => {\r\n         files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n      };\r\n   }, [files]);\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width={4}>\r\n            <Header sub color=\"teal\" content=\"Step 1 - Add Photo\" />\r\n            <PhotoWidgetDropzone setFiles={setFiles} />\r\n         </Grid.Column>\r\n         <Grid.Column width={1} />\r\n         <Grid.Column width={4}>\r\n            <Header sub color=\"teal\" content=\"Step 2 - Resize Image\" />\r\n            {files && files.length > 0 && (\r\n               <PhotoWidgetCropper\r\n                  setCropper={setCropper}\r\n                  imagePreview={files[0].preview}\r\n               />\r\n            )}\r\n         </Grid.Column>\r\n         <Grid.Column width={1} />\r\n         <Grid.Column width={4}>\r\n            <Header sub color=\"teal\" content=\"Step 3 -Preview & Upload\" />\r\n            {files && files.length > 0 && (\r\n               <>\r\n                  <div\r\n                     className=\"img-preview\"\r\n                     style={{ minHeight: 200, overflow: \"hidden\" }}\r\n                  />\r\n                  <Button.Group widths={2}>\r\n                     <Button\r\n                        loading={loading}\r\n                        onClick={onCrop}\r\n                        positive\r\n                        icon=\"check\"\r\n                     />\r\n                     <Button\r\n                        disabled={loading}\r\n                        onClick={() => setFiles([])}\r\n                        icon=\"close\"\r\n                     />\r\n                  </Button.Group>\r\n               </>\r\n            )}\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n   profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n   const {\r\n      profileStore: {\r\n         isCurrentUser,\r\n         uploadPhoto,\r\n         uploading,\r\n         loading,\r\n         setMainPhoto,\r\n         deletePhoto,\r\n      },\r\n   } = useStore();\r\n   const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n   const [target, setTarget] = useState(\"\");\r\n\r\n   function handlePhotoUpload(file: Blob) {\r\n      uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n   }\r\n\r\n   function handleSetMainPhoto(\r\n      photo: Photo,\r\n      e: SyntheticEvent<HTMLButtonElement>\r\n   ) {\r\n      setTarget(e.currentTarget.name);\r\n      setMainPhoto(photo);\r\n   }\r\n\r\n   function handleDeletePhoto(\r\n      photo: Photo,\r\n      e: SyntheticEvent<HTMLButtonElement>\r\n   ) {\r\n      setTarget(e.currentTarget.name);\r\n      deletePhoto(photo);\r\n   }\r\n\r\n   return (\r\n      <Tab.Pane>\r\n         <Grid>\r\n            <Grid.Column width={16}>\r\n               <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n               {isCurrentUser && (\r\n                  <Button\r\n                     floated=\"right\"\r\n                     basic\r\n                     content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                     onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                  />\r\n               )}\r\n            </Grid.Column>\r\n            <Grid.Column width={16}>\r\n               {addPhotoMode ? (\r\n                  <PhotoUploadWidget\r\n                     uploadPhoto={handlePhotoUpload}\r\n                     loading={uploading}\r\n                  />\r\n               ) : (\r\n                  <Card.Group itemsPerRow={5}>\r\n                     {profile.photos?.map((photo) => (\r\n                        <Card key={photo.id}>\r\n                           <Image src={photo.url} />\r\n                           {isCurrentUser && (\r\n                              <Button.Group fluid widths={2}>\r\n                                 <Button\r\n                                    basic\r\n                                    color=\"green\"\r\n                                    content=\"Main\"\r\n                                    name={\"main\" + photo.id}\r\n                                    disabled={photo.isMain}\r\n                                    loading={\r\n                                       target === \"main\" + photo.id && loading\r\n                                    }\r\n                                    onClick={(e) =>\r\n                                       handleSetMainPhoto(photo, e)\r\n                                    }\r\n                                 />\r\n                                 <Button\r\n                                    basic\r\n                                    color=\"red\"\r\n                                    icon=\"trash\"\r\n                                    loading={target === photo.id && loading}\r\n                                    onClick={(e) => handleDeletePhoto(photo, e)}\r\n                                    disabled={photo.isMain}\r\n                                    name={photo.id}\r\n                                 />\r\n                              </Button.Group>\r\n                           )}\r\n                        </Card>\r\n                     ))}\r\n                  </Card.Group>\r\n               )}\r\n            </Grid.Column>\r\n         </Grid>\r\n      </Tab.Pane>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n   profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n   const { profileStore } = useStore();\r\n\r\n   const panes = [\r\n      { menuItem: \"About\", render: () => <ProfileAbout /> },\r\n      {\r\n         menuItem: \"Photos\",\r\n         render: () => <ProfilePhotos profile={profile} />,\r\n      },\r\n      {\r\n         menuItem: \"Events\",\r\n         render: () => <ProfileActivities />,\r\n      },\r\n      {\r\n         menuItem: \"Followers\",\r\n         render: () => <ProfileFollowings />,\r\n      },\r\n      {\r\n         menuItem: \"Following\",\r\n         render: () => <ProfileFollowings />,\r\n      },\r\n   ];\r\n\r\n   return (\r\n      <Tab\r\n         menu={{ fluid: true, vertical: true }}\r\n         menuPosition=\"right\"\r\n         panes={panes}\r\n         onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n      />\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {\r\n   Divider,\r\n   Grid,\r\n   Header,\r\n   Item,\r\n   Segment,\r\n   Statistic,\r\n} from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n   profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n   return (\r\n      <Segment>\r\n         <Grid>\r\n            <Grid.Column width={12}>\r\n               <Item.Group>\r\n                  <Item>\r\n                     <Item.Image\r\n                        avatar\r\n                        size=\"small\"\r\n                        src={profile.image || \"/assets/user.png\"}\r\n                     />\r\n                     <Item.Content verticalAlign=\"middle\">\r\n                        <Header as=\"h1\" content={profile.displayName} />\r\n                     </Item.Content>\r\n                  </Item>\r\n               </Item.Group>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n               <Statistic.Group width={2}>\r\n                  <Statistic label=\"Followers\" value={profile.followersCount} />\r\n                  <Statistic label=\"Following\" value={profile.followingCount} />\r\n               </Statistic.Group>\r\n               <Divider />\r\n               <FollowButton profile={profile} />\r\n            </Grid.Column>\r\n         </Grid>\r\n      </Segment>\r\n   );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n   const { username } = useParams<{ username: string }>();\r\n   const { profileStore } = useStore();\r\n   const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n   useEffect(() => {\r\n      loadProfile(username);\r\n      return () => {\r\n         setActiveTab(0);\r\n      };\r\n   }, [loadProfile, username, setActiveTab]);\r\n\r\n   if (loadingProfile) return <LoadingComponent content=\"Loading Profile...\" />;\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width={16}>\r\n            {profile && (\r\n               <>\r\n                  <ProfileHeader profile={profile} />\r\n                  <ProfileContent profile={profile} />\r\n               </>\r\n            )}\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n});\r\n","import {\r\n   Redirect,\r\n   Route,\r\n   RouteComponentProps,\r\n   RouteProps,\r\n} from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n   component:\r\n      | React.ComponentType<RouteComponentProps<any>>\r\n      | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n   const {\r\n      userStore: { isLoggedIn },\r\n   } = useStore();\r\n   return (\r\n      <Route\r\n         {...rest}\r\n         render={(props) =>\r\n            isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n         }\r\n      />\r\n   );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./NavBar\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Route, Switch, useLocation } from \"react-router\";\r\nimport HomePage from \"../../features/home/HomePage\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../../features/details/ActivityDetails\";\r\nimport TestErrors from \"../../features/errors/TestError\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NotFound from \"../../features/errors/NotFound\";\r\nimport ServerError from \"../../features/errors/ServerError\";\r\nimport { useStore } from \"../stores/store\";\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nfunction App() {\r\n   const location = useLocation();\r\n   const { commonStore, userStore } = useStore();\r\n\r\n   useEffect(() => {\r\n      if (commonStore.token) {\r\n         userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n      } else {\r\n         commonStore.setAppLoaded();\r\n      }\r\n   }, [commonStore, userStore]);\r\n\r\n   if (!commonStore.appLoaded)\r\n      return <LoadingComponent content=\"Loading app...\" />;\r\n\r\n   return (\r\n      <>\r\n         <ToastContainer position=\"bottom-right\" hideProgressBar />\r\n         <ModalContainer />\r\n         <Route exact path=\"/\" component={HomePage} />\r\n         <Route\r\n            path={\"/(.+)\"}\r\n            render={() => (\r\n               <>\r\n                  <NavBar />\r\n                  <Container style={{ marginTop: \"7em\" }}>\r\n                     <Switch>\r\n                        <PrivateRoute\r\n                           exact\r\n                           path=\"/activities\"\r\n                           component={ActivityDashboard}\r\n                        />\r\n                        <PrivateRoute\r\n                           path=\"/activities/:id\"\r\n                           component={ActivityDetails}\r\n                        />\r\n                        <PrivateRoute\r\n                           key={location.key}\r\n                           path={[\"/createActivity\", \"/manage/:id\"]}\r\n                           component={ActivityForm}\r\n                        />\r\n                        <PrivateRoute\r\n                           path=\"/profiles/:username\"\r\n                           component={ProfilePage}\r\n                        />\r\n                        <PrivateRoute path=\"/errors\" component={TestErrors} />\r\n                        <Route path=\"/server-error\" component={ServerError} />\r\n                        <Route component={NotFound} />\r\n                     </Switch>\r\n                  </Container>\r\n               </>\r\n            )}\r\n         />\r\n      </>\r\n   );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n   const { pathname } = useLocation();\r\n\r\n   useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n   }, [pathname]);\r\n\r\n   return null;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./app/layout/styles.css\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport App from \"./app/layout/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { store, StoreContext } from \"./app/stores/store\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n   <StoreContext.Provider value={store}>\r\n      <Router history={history}>\r\n         <ScrollToTop />\r\n         <App />\r\n      </Router>\r\n   </StoreContext.Provider>,\r\n   document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}